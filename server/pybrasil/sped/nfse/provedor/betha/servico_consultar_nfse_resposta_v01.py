#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Jan 22 11:34:43 2014 by generateDS.py version 2.12a.
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ConsultarNfseResposta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListaNfse=None, MensagemRetorno=None):
        self.ListaNfse = ListaNfse
        self.MensagemRetorno = MensagemRetorno
    def factory(*args_, **kwargs_):
        if ConsultarNfseResposta.subclass:
            return ConsultarNfseResposta.subclass(*args_, **kwargs_)
        else:
            return ConsultarNfseResposta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListaNfse(self): return self.ListaNfse
    def set_ListaNfse(self, ListaNfse): self.ListaNfse = ListaNfse
    def get_MensagemRetorno(self): return self.MensagemRetorno
    def set_MensagemRetorno(self, MensagemRetorno): self.MensagemRetorno = MensagemRetorno
    def hasContent_(self):
        if (
            self.ListaNfse is not None or
            self.MensagemRetorno is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ConsultarNfseResposta', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConsultarNfseResposta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ConsultarNfseResposta'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ConsultarNfseResposta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListaNfse is not None:
            self.ListaNfse.export(outfile, level, namespace_, name_='ListaNfse', pretty_print=pretty_print)
        if self.MensagemRetorno is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMensagemRetorno>%s</%sMensagemRetorno>%s' % (namespace_, self.gds_format_string(quote_xml(self.MensagemRetorno).encode(ExternalEncoding), input_name='MensagemRetorno'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ConsultarNfseResposta'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListaNfse is not None:
            showIndent(outfile, level)
            outfile.write('ListaNfse=model_.ListaNfseType(\n')
            self.ListaNfse.exportLiteral(outfile, level, name_='ListaNfse')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.MensagemRetorno is not None:
            showIndent(outfile, level)
            outfile.write('MensagemRetorno=%s,\n' % quote_python(self.MensagemRetorno).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListaNfse':
            obj_ = ListaNfseType.factory()
            obj_.build(child_)
            self.ListaNfse = obj_
        elif nodeName_ == 'MensagemRetorno':
            MensagemRetorno_ = child_.text
            MensagemRetorno_ = self.gds_validate_string(MensagemRetorno_, node, 'MensagemRetorno')
            self.MensagemRetorno = MensagemRetorno_
# end class ConsultarNfseResposta


class tcIdentificacaoPrestador(GeneratedsSuper):
    """Representa dados para identificação do prestador de serviços"""
    subclass = None
    superclass = None
    def __init__(self, Cnpj=None, InscricaoMunicipal=None):
        self.Cnpj = Cnpj
        self.InscricaoMunicipal = InscricaoMunicipal
    def factory(*args_, **kwargs_):
        if tcIdentificacaoPrestador.subclass:
            return tcIdentificacaoPrestador.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoPrestador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cnpj(self): return self.Cnpj
    def set_Cnpj(self, Cnpj): self.Cnpj = Cnpj
    def get_InscricaoMunicipal(self): return self.InscricaoMunicipal
    def set_InscricaoMunicipal(self, InscricaoMunicipal): self.InscricaoMunicipal = InscricaoMunicipal
    def validate_TsCnpj(self, value):
        # Validate type TsCnpj, a restriction on xs:string.
        pass
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xs:long.
        pass
    def hasContent_(self):
        if (
            self.Cnpj is not None or
            self.InscricaoMunicipal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcIdentificacaoPrestador', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcIdentificacaoPrestador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcIdentificacaoPrestador'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcIdentificacaoPrestador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cnpj).encode(ExternalEncoding), input_name='Cnpj'), namespace_, eol_))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespace_, self.gds_format_integer(self.InscricaoMunicipal, input_name='InscricaoMunicipal'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='tcIdentificacaoPrestador'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Cnpj is not None:
            showIndent(outfile, level)
            outfile.write('Cnpj=%s,\n' % quote_python(self.Cnpj).encode(ExternalEncoding))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoMunicipal=%d,\n' % self.InscricaoMunicipal)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            self.validate_TsCnpj(self.Cnpj)    # validate type TsCnpj
        elif nodeName_ == 'InscricaoMunicipal':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = ival_
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)    # validate type tsInscricaoMunicipal
# end class tcIdentificacaoPrestador


class tcIdentificacaoTomador(GeneratedsSuper):
    """Representa dados para identificação do tomador de serviços"""
    subclass = None
    superclass = None
    def __init__(self, CpfCnpj=None, InscricaoMunicipal=None):
        self.CpfCnpj = CpfCnpj
        self.InscricaoMunicipal = InscricaoMunicipal
    def factory(*args_, **kwargs_):
        if tcIdentificacaoTomador.subclass:
            return tcIdentificacaoTomador.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoTomador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CpfCnpj(self): return self.CpfCnpj
    def set_CpfCnpj(self, CpfCnpj): self.CpfCnpj = CpfCnpj
    def get_InscricaoMunicipal(self): return self.InscricaoMunicipal
    def set_InscricaoMunicipal(self, InscricaoMunicipal): self.InscricaoMunicipal = InscricaoMunicipal
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xs:long.
        pass
    def hasContent_(self):
        if (
            self.CpfCnpj is not None or
            self.InscricaoMunicipal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcIdentificacaoTomador', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcIdentificacaoTomador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcIdentificacaoTomador'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcIdentificacaoTomador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CpfCnpj is not None:
            self.CpfCnpj.export(outfile, level, namespace_, name_='CpfCnpj', pretty_print=pretty_print)
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespace_, self.gds_format_integer(self.InscricaoMunicipal, input_name='InscricaoMunicipal'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='tcIdentificacaoTomador'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CpfCnpj is not None:
            showIndent(outfile, level)
            outfile.write('CpfCnpj=model_.TcCpfCnpj(\n')
            self.CpfCnpj.exportLiteral(outfile, level, name_='CpfCnpj')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoMunicipal=%d,\n' % self.InscricaoMunicipal)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CpfCnpj':
            obj_ = TcCpfCnpj.factory()
            obj_.build(child_)
            self.CpfCnpj = obj_
        elif nodeName_ == 'InscricaoMunicipal':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = ival_
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)    # validate type tsInscricaoMunicipal
# end class tcIdentificacaoTomador


class TcIdentificacaoIntermediarioServico(GeneratedsSuper):
    """Representa dados para identificação do intermediário de serviços"""
    subclass = None
    superclass = None
    def __init__(self, RazaoSocial=None, CpfCnpj=None, InscricaoMunicipal=None):
        self.RazaoSocial = RazaoSocial
        self.CpfCnpj = CpfCnpj
        self.InscricaoMunicipal = InscricaoMunicipal
    def factory(*args_, **kwargs_):
        if TcIdentificacaoIntermediarioServico.subclass:
            return TcIdentificacaoIntermediarioServico.subclass(*args_, **kwargs_)
        else:
            return TcIdentificacaoIntermediarioServico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RazaoSocial(self): return self.RazaoSocial
    def set_RazaoSocial(self, RazaoSocial): self.RazaoSocial = RazaoSocial
    def get_CpfCnpj(self): return self.CpfCnpj
    def set_CpfCnpj(self, CpfCnpj): self.CpfCnpj = CpfCnpj
    def get_InscricaoMunicipal(self): return self.InscricaoMunicipal
    def set_InscricaoMunicipal(self, InscricaoMunicipal): self.InscricaoMunicipal = InscricaoMunicipal
    def validate_tsRazaoSocial(self, value):
        # Validate type tsRazaoSocial, a restriction on xs:string.
        pass
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xs:long.
        pass
    def hasContent_(self):
        if (
            self.RazaoSocial is not None or
            self.CpfCnpj is not None or
            self.InscricaoMunicipal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TcIdentificacaoIntermediarioServico', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TcIdentificacaoIntermediarioServico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TcIdentificacaoIntermediarioServico'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TcIdentificacaoIntermediarioServico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RazaoSocial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocial>%s</%sRazaoSocial>%s' % (namespace_, self.gds_format_string(quote_xml(self.RazaoSocial).encode(ExternalEncoding), input_name='RazaoSocial'), namespace_, eol_))
        if self.CpfCnpj is not None:
            self.CpfCnpj.export(outfile, level, namespace_, name_='CpfCnpj', pretty_print=pretty_print)
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespace_, self.gds_format_integer(self.InscricaoMunicipal, input_name='InscricaoMunicipal'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='TcIdentificacaoIntermediarioServico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RazaoSocial is not None:
            showIndent(outfile, level)
            outfile.write('RazaoSocial=%s,\n' % quote_python(self.RazaoSocial).encode(ExternalEncoding))
        if self.CpfCnpj is not None:
            showIndent(outfile, level)
            outfile.write('CpfCnpj=model_.TcCpfCnpj(\n')
            self.CpfCnpj.exportLiteral(outfile, level, name_='CpfCnpj')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoMunicipal=%d,\n' % self.InscricaoMunicipal)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RazaoSocial':
            RazaoSocial_ = child_.text
            RazaoSocial_ = self.gds_validate_string(RazaoSocial_, node, 'RazaoSocial')
            self.RazaoSocial = RazaoSocial_
            self.validate_tsRazaoSocial(self.RazaoSocial)    # validate type tsRazaoSocial
        elif nodeName_ == 'CpfCnpj':
            obj_ = TcCpfCnpj.factory()
            obj_.build(child_)
            self.CpfCnpj = obj_
        elif nodeName_ == 'InscricaoMunicipal':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = ival_
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)    # validate type tsInscricaoMunicipal
# end class TcIdentificacaoIntermediarioServico


class TcCpfCnpj(GeneratedsSuper):
    """Número de Cpf ou Cnpj"""
    subclass = None
    superclass = None
    def __init__(self, Cpf=None, Cnpj=None):
        self.Cpf = Cpf
        self.Cnpj = Cnpj
    def factory(*args_, **kwargs_):
        if TcCpfCnpj.subclass:
            return TcCpfCnpj.subclass(*args_, **kwargs_)
        else:
            return TcCpfCnpj(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cpf(self): return self.Cpf
    def set_Cpf(self, Cpf): self.Cpf = Cpf
    def get_Cnpj(self): return self.Cnpj
    def set_Cnpj(self, Cnpj): self.Cnpj = Cnpj
    def validate_TsCpf(self, value):
        # Validate type TsCpf, a restriction on xs:string.
        pass
    def validate_TsCnpj(self, value):
        # Validate type TsCnpj, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.Cpf is not None or
            self.Cnpj is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TcCpfCnpj', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TcCpfCnpj')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TcCpfCnpj'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TcCpfCnpj', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Cpf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCpf>%s</%sCpf>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cpf).encode(ExternalEncoding), input_name='Cpf'), namespace_, eol_))
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cnpj).encode(ExternalEncoding), input_name='Cnpj'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='TcCpfCnpj'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Cpf is not None:
            showIndent(outfile, level)
            outfile.write('Cpf=%s,\n' % quote_python(self.Cpf).encode(ExternalEncoding))
        if self.Cnpj is not None:
            showIndent(outfile, level)
            outfile.write('Cnpj=%s,\n' % quote_python(self.Cnpj).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cpf':
            Cpf_ = child_.text
            Cpf_ = self.gds_validate_string(Cpf_, node, 'Cpf')
            self.Cpf = Cpf_
            self.validate_TsCpf(self.Cpf)    # validate type TsCpf
        elif nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            self.validate_TsCnpj(self.Cnpj)    # validate type TsCnpj
# end class TcCpfCnpj


class tcLoteRps(GeneratedsSuper):
    """Lote dp RPS"""
    subclass = None
    superclass = None
    def __init__(self, Id=None, NumeroLote=None, Cnpj=None, InscricaoMunicipal=None, QuantidadeRps=None, ListaRps=None):
        self.Id = _cast(None, Id)
        self.NumeroLote = NumeroLote
        self.Cnpj = Cnpj
        self.InscricaoMunicipal = InscricaoMunicipal
        self.QuantidadeRps = QuantidadeRps
        self.ListaRps = ListaRps
    def factory(*args_, **kwargs_):
        if tcLoteRps.subclass:
            return tcLoteRps.subclass(*args_, **kwargs_)
        else:
            return tcLoteRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumeroLote(self): return self.NumeroLote
    def set_NumeroLote(self, NumeroLote): self.NumeroLote = NumeroLote
    def get_Cnpj(self): return self.Cnpj
    def set_Cnpj(self, Cnpj): self.Cnpj = Cnpj
    def get_InscricaoMunicipal(self): return self.InscricaoMunicipal
    def set_InscricaoMunicipal(self, InscricaoMunicipal): self.InscricaoMunicipal = InscricaoMunicipal
    def get_QuantidadeRps(self): return self.QuantidadeRps
    def set_QuantidadeRps(self, QuantidadeRps): self.QuantidadeRps = QuantidadeRps
    def get_ListaRps(self): return self.ListaRps
    def set_ListaRps(self, ListaRps): self.ListaRps = ListaRps
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def validate_tsNumeroLote(self, value):
        # Validate type tsNumeroLote, a restriction on xs:long.
        pass
    def validate_TsCnpj(self, value):
        # Validate type TsCnpj, a restriction on xs:string.
        pass
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xs:long.
        pass
    def validate_TsQuantidadeRps(self, value):
        # Validate type TsQuantidadeRps, a restriction on xs:int.
        pass
    def hasContent_(self):
        if (
            self.NumeroLote is not None or
            self.Cnpj is not None or
            self.InscricaoMunicipal is not None or
            self.QuantidadeRps is not None or
            self.ListaRps is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcLoteRps', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcLoteRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcLoteRps'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='tcLoteRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>%s' % (namespace_, self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespace_, eol_))
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cnpj).encode(ExternalEncoding), input_name='Cnpj'), namespace_, eol_))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespace_, self.gds_format_integer(self.InscricaoMunicipal, input_name='InscricaoMunicipal'), namespace_, eol_))
        if self.QuantidadeRps is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantidadeRps>%s</%sQuantidadeRps>%s' % (namespace_, self.gds_format_integer(self.QuantidadeRps, input_name='QuantidadeRps'), namespace_, eol_))
        if self.ListaRps is not None:
            self.ListaRps.export(outfile, level, namespace_, name_='ListaRps', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='tcLoteRps'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NumeroLote is not None:
            showIndent(outfile, level)
            outfile.write('NumeroLote=%d,\n' % self.NumeroLote)
        if self.Cnpj is not None:
            showIndent(outfile, level)
            outfile.write('Cnpj=%s,\n' % quote_python(self.Cnpj).encode(ExternalEncoding))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoMunicipal=%d,\n' % self.InscricaoMunicipal)
        if self.QuantidadeRps is not None:
            showIndent(outfile, level)
            outfile.write('QuantidadeRps=%d,\n' % self.QuantidadeRps)
        if self.ListaRps is not None:
            showIndent(outfile, level)
            outfile.write('ListaRps=model_.ListaRpsType(\n')
            self.ListaRps.exportLiteral(outfile, level, name_='ListaRps')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumeroLote':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            self.validate_tsNumeroLote(self.NumeroLote)    # validate type tsNumeroLote
        elif nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            self.validate_TsCnpj(self.Cnpj)    # validate type TsCnpj
        elif nodeName_ == 'InscricaoMunicipal':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = ival_
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)    # validate type tsInscricaoMunicipal
        elif nodeName_ == 'QuantidadeRps':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'QuantidadeRps')
            self.QuantidadeRps = ival_
            self.validate_TsQuantidadeRps(self.QuantidadeRps)    # validate type TsQuantidadeRps
        elif nodeName_ == 'ListaRps':
            obj_ = ListaRpsType.factory()
            obj_.build(child_)
            self.ListaRps = obj_
# end class tcLoteRps


class tcRps(GeneratedsSuper):
    """Representação do RPS"""
    subclass = None
    superclass = None
    def __init__(self, InfRps=None, Signature=None):
        self.InfRps = InfRps
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if tcRps.subclass:
            return tcRps.subclass(*args_, **kwargs_)
        else:
            return tcRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InfRps(self): return self.InfRps
    def set_InfRps(self, InfRps): self.InfRps = InfRps
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def hasContent_(self):
        if (
            self.InfRps is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcRps', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcRps'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InfRps is not None:
            self.InfRps.export(outfile, level, namespace_, name_='InfRps', pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(outfile, level, namespace_='ds:', name_='Signature', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='tcRps'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.InfRps is not None:
            showIndent(outfile, level)
            outfile.write('InfRps=model_.tcInfRps(\n')
            self.InfRps.exportLiteral(outfile, level, name_='InfRps')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Signature is not None:
            showIndent(outfile, level)
            outfile.write('Signature=model_.Signature(\n')
            self.Signature.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InfRps':
            obj_ = tcInfRps.factory()
            obj_.build(child_)
            self.InfRps = obj_
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.Signature = obj_
# end class tcRps


class tcInfRps(GeneratedsSuper):
    """Representa a estrutura de recibo provisório de serviços (Rps)"""
    subclass = None
    superclass = None
    def __init__(self, Id=None, IdentificacaoRps=None, DataEmissao=None, NaturezaOperacao=None, RegimeEspecialTributacao=None, OptanteSimplesNacional=None, IncentivadorCultural=None, Status=None, OutrasInformacoes=None, RpsSubstituido=None, Servico=None, Prestador=None, Tomador=None, IntermediarioServico=None, ConstrucaoCivil=None):
        self.Id = _cast(None, Id)
        self.IdentificacaoRps = IdentificacaoRps
        if isinstance(DataEmissao, basestring):
            initvalue_ = datetime_.datetime.strptime(DataEmissao, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataEmissao
        self.DataEmissao = initvalue_
        self.NaturezaOperacao = NaturezaOperacao
        self.RegimeEspecialTributacao = RegimeEspecialTributacao
        self.OptanteSimplesNacional = OptanteSimplesNacional
        self.IncentivadorCultural = IncentivadorCultural
        self.Status = Status
        self.OutrasInformacoes = OutrasInformacoes
        self.RpsSubstituido = RpsSubstituido
        self.Servico = Servico
        self.Prestador = Prestador
        self.Tomador = Tomador
        self.IntermediarioServico = IntermediarioServico
        self.ConstrucaoCivil = ConstrucaoCivil
    def factory(*args_, **kwargs_):
        if tcInfRps.subclass:
            return tcInfRps.subclass(*args_, **kwargs_)
        else:
            return tcInfRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificacaoRps(self): return self.IdentificacaoRps
    def set_IdentificacaoRps(self, IdentificacaoRps): self.IdentificacaoRps = IdentificacaoRps
    def get_DataEmissao(self): return self.DataEmissao
    def set_DataEmissao(self, DataEmissao): self.DataEmissao = DataEmissao
    def get_NaturezaOperacao(self): return self.NaturezaOperacao
    def set_NaturezaOperacao(self, NaturezaOperacao): self.NaturezaOperacao = NaturezaOperacao
    def get_RegimeEspecialTributacao(self): return self.RegimeEspecialTributacao
    def set_RegimeEspecialTributacao(self, RegimeEspecialTributacao): self.RegimeEspecialTributacao = RegimeEspecialTributacao
    def get_OptanteSimplesNacional(self): return self.OptanteSimplesNacional
    def set_OptanteSimplesNacional(self, OptanteSimplesNacional): self.OptanteSimplesNacional = OptanteSimplesNacional
    def get_IncentivadorCultural(self): return self.IncentivadorCultural
    def set_IncentivadorCultural(self, IncentivadorCultural): self.IncentivadorCultural = IncentivadorCultural
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_OutrasInformacoes(self): return self.OutrasInformacoes
    def set_OutrasInformacoes(self, OutrasInformacoes): self.OutrasInformacoes = OutrasInformacoes
    def get_RpsSubstituido(self): return self.RpsSubstituido
    def set_RpsSubstituido(self, RpsSubstituido): self.RpsSubstituido = RpsSubstituido
    def get_Servico(self): return self.Servico
    def set_Servico(self, Servico): self.Servico = Servico
    def get_Prestador(self): return self.Prestador
    def set_Prestador(self, Prestador): self.Prestador = Prestador
    def get_Tomador(self): return self.Tomador
    def set_Tomador(self, Tomador): self.Tomador = Tomador
    def get_IntermediarioServico(self): return self.IntermediarioServico
    def set_IntermediarioServico(self, IntermediarioServico): self.IntermediarioServico = IntermediarioServico
    def get_ConstrucaoCivil(self): return self.ConstrucaoCivil
    def set_ConstrucaoCivil(self, ConstrucaoCivil): self.ConstrucaoCivil = ConstrucaoCivil
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def validate_tsNaturezaOperacao(self, value):
        # Validate type tsNaturezaOperacao, a restriction on xs:int.
        pass
    def validate_tsRegimeEspecialTributacao(self, value):
        # Validate type tsRegimeEspecialTributacao, a restriction on xs:int.
        pass
    def validate_TsSimNao(self, value):
        # Validate type TsSimNao, a restriction on xs:int.
        pass
    def validate_TsStatusRps(self, value):
        # Validate type TsStatusRps, a restriction on xs:int.
        pass
    def validate_tsOutrasInformacoes(self, value):
        # Validate type tsOutrasInformacoes, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.IdentificacaoRps is not None or
            self.DataEmissao is not None or
            self.NaturezaOperacao is not None or
            self.RegimeEspecialTributacao is not None or
            self.OptanteSimplesNacional is not None or
            self.IncentivadorCultural is not None or
            self.Status is not None or
            self.OutrasInformacoes is not None or
            self.RpsSubstituido is not None or
            self.Servico is not None or
            self.Prestador is not None or
            self.Tomador is not None or
            self.IntermediarioServico is not None or
            self.ConstrucaoCivil is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcInfRps', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcInfRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcInfRps'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='tcInfRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoRps is not None:
            self.IdentificacaoRps.export(outfile, level, namespace_, name_='IdentificacaoRps', pretty_print=pretty_print)
        if self.DataEmissao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEmissao>%s</%sDataEmissao>%s' % (namespace_, self.gds_format_datetime(self.DataEmissao, input_name='DataEmissao'), namespace_, eol_))
        if self.NaturezaOperacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNaturezaOperacao>%s</%sNaturezaOperacao>%s' % (namespace_, self.gds_format_integer(self.NaturezaOperacao, input_name='NaturezaOperacao'), namespace_, eol_))
        if self.RegimeEspecialTributacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegimeEspecialTributacao>%s</%sRegimeEspecialTributacao>%s' % (namespace_, self.gds_format_integer(self.RegimeEspecialTributacao, input_name='RegimeEspecialTributacao'), namespace_, eol_))
        if self.OptanteSimplesNacional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptanteSimplesNacional>%s</%sOptanteSimplesNacional>%s' % (namespace_, self.gds_format_integer(self.OptanteSimplesNacional, input_name='OptanteSimplesNacional'), namespace_, eol_))
        if self.IncentivadorCultural is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncentivadorCultural>%s</%sIncentivadorCultural>%s' % (namespace_, self.gds_format_integer(self.IncentivadorCultural, input_name='IncentivadorCultural'), namespace_, eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespace_, self.gds_format_integer(self.Status, input_name='Status'), namespace_, eol_))
        if self.OutrasInformacoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutrasInformacoes>%s</%sOutrasInformacoes>%s' % (namespace_, self.gds_format_string(quote_xml(self.OutrasInformacoes).encode(ExternalEncoding), input_name='OutrasInformacoes'), namespace_, eol_))
        if self.RpsSubstituido is not None:
            self.RpsSubstituido.export(outfile, level, namespace_, name_='RpsSubstituido', pretty_print=pretty_print)
        if self.Servico is not None:
            self.Servico.export(outfile, level, namespace_, name_='Servico', pretty_print=pretty_print)
        if self.Prestador is not None:
            self.Prestador.export(outfile, level, namespace_, name_='Prestador', pretty_print=pretty_print)
        if self.Tomador is not None:
            self.Tomador.export(outfile, level, namespace_, name_='Tomador', pretty_print=pretty_print)
        if self.IntermediarioServico is not None:
            self.IntermediarioServico.export(outfile, level, namespace_, name_='IntermediarioServico', pretty_print=pretty_print)
        if self.ConstrucaoCivil is not None:
            self.ConstrucaoCivil.export(outfile, level, namespace_, name_='ConstrucaoCivil', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='tcInfRps'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.IdentificacaoRps is not None:
            showIndent(outfile, level)
            outfile.write('IdentificacaoRps=model_.tcIdentificacaoRps(\n')
            self.IdentificacaoRps.exportLiteral(outfile, level, name_='IdentificacaoRps')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DataEmissao is not None:
            showIndent(outfile, level)
            outfile.write('DataEmissao=model_.GeneratedsSuper.gds_parse_datetime("%s"),\n' % self.gds_format_datetime(self.DataEmissao, input_name='DataEmissao'))
        if self.NaturezaOperacao is not None:
            showIndent(outfile, level)
            outfile.write('NaturezaOperacao=%d,\n' % self.NaturezaOperacao)
        if self.RegimeEspecialTributacao is not None:
            showIndent(outfile, level)
            outfile.write('RegimeEspecialTributacao=%d,\n' % self.RegimeEspecialTributacao)
        if self.OptanteSimplesNacional is not None:
            showIndent(outfile, level)
            outfile.write('OptanteSimplesNacional=%d,\n' % self.OptanteSimplesNacional)
        if self.IncentivadorCultural is not None:
            showIndent(outfile, level)
            outfile.write('IncentivadorCultural=%d,\n' % self.IncentivadorCultural)
        if self.Status is not None:
            showIndent(outfile, level)
            outfile.write('Status=%d,\n' % self.Status)
        if self.OutrasInformacoes is not None:
            showIndent(outfile, level)
            outfile.write('OutrasInformacoes=%s,\n' % quote_python(self.OutrasInformacoes).encode(ExternalEncoding))
        if self.RpsSubstituido is not None:
            showIndent(outfile, level)
            outfile.write('RpsSubstituido=model_.tcIdentificacaoRps(\n')
            self.RpsSubstituido.exportLiteral(outfile, level, name_='RpsSubstituido')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Servico is not None:
            showIndent(outfile, level)
            outfile.write('Servico=model_.TcDadosServico(\n')
            self.Servico.exportLiteral(outfile, level, name_='Servico')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Prestador is not None:
            showIndent(outfile, level)
            outfile.write('Prestador=model_.tcIdentificacaoPrestador(\n')
            self.Prestador.exportLiteral(outfile, level, name_='Prestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Tomador is not None:
            showIndent(outfile, level)
            outfile.write('Tomador=model_.tcDadosTomador(\n')
            self.Tomador.exportLiteral(outfile, level, name_='Tomador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IntermediarioServico is not None:
            showIndent(outfile, level)
            outfile.write('IntermediarioServico=model_.TcIdentificacaoIntermediarioServico(\n')
            self.IntermediarioServico.exportLiteral(outfile, level, name_='IntermediarioServico')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ConstrucaoCivil is not None:
            showIndent(outfile, level)
            outfile.write('ConstrucaoCivil=model_.tcDadosConstrucaoCivil(\n')
            self.ConstrucaoCivil.exportLiteral(outfile, level, name_='ConstrucaoCivil')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoRps':
            obj_ = tcIdentificacaoRps.factory()
            obj_.build(child_)
            self.IdentificacaoRps = obj_
        elif nodeName_ == 'DataEmissao':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataEmissao = dval_
        elif nodeName_ == 'NaturezaOperacao':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NaturezaOperacao')
            self.NaturezaOperacao = ival_
            self.validate_tsNaturezaOperacao(self.NaturezaOperacao)    # validate type tsNaturezaOperacao
        elif nodeName_ == 'RegimeEspecialTributacao':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RegimeEspecialTributacao')
            self.RegimeEspecialTributacao = ival_
            self.validate_tsRegimeEspecialTributacao(self.RegimeEspecialTributacao)    # validate type tsRegimeEspecialTributacao
        elif nodeName_ == 'OptanteSimplesNacional':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'OptanteSimplesNacional')
            self.OptanteSimplesNacional = ival_
            self.validate_TsSimNao(self.OptanteSimplesNacional)    # validate type TsSimNao
        elif nodeName_ == 'IncentivadorCultural':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IncentivadorCultural')
            self.IncentivadorCultural = ival_
            self.validate_TsSimNao(self.IncentivadorCultural)    # validate type TsSimNao
        elif nodeName_ == 'Status':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Status')
            self.Status = ival_
            self.validate_TsStatusRps(self.Status)    # validate type TsStatusRps
        elif nodeName_ == 'OutrasInformacoes':
            OutrasInformacoes_ = child_.text
            OutrasInformacoes_ = self.gds_validate_string(OutrasInformacoes_, node, 'OutrasInformacoes')
            self.OutrasInformacoes = OutrasInformacoes_
            self.validate_tsOutrasInformacoes(self.OutrasInformacoes)    # validate type tsOutrasInformacoes
        elif nodeName_ == 'RpsSubstituido':
            obj_ = tcIdentificacaoRps.factory()
            obj_.build(child_)
            self.RpsSubstituido = obj_
        elif nodeName_ == 'Servico':
            obj_ = TcDadosServico.factory()
            obj_.build(child_)
            self.Servico = obj_
        elif nodeName_ == 'Prestador':
            obj_ = tcIdentificacaoPrestador.factory()
            obj_.build(child_)
            self.Prestador = obj_
        elif nodeName_ == 'Tomador':
            obj_ = tcDadosTomador.factory()
            obj_.build(child_)
            self.Tomador = obj_
        elif nodeName_ == 'IntermediarioServico':
            obj_ = TcIdentificacaoIntermediarioServico.factory()
            obj_.build(child_)
            self.IntermediarioServico = obj_
        elif nodeName_ == 'ConstrucaoCivil':
            obj_ = tcDadosConstrucaoCivil.factory()
            obj_.build(child_)
            self.ConstrucaoCivil = obj_
# end class tcInfRps


class tcIdentificacaoRps(GeneratedsSuper):
    """Dados de identificação do Rps"""
    subclass = None
    superclass = None
    def __init__(self, Numero=None, Serie=None, Tipo=None):
        self.Numero = Numero
        self.Serie = Serie
        self.Tipo = Tipo
    def factory(*args_, **kwargs_):
        if tcIdentificacaoRps.subclass:
            return tcIdentificacaoRps.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Numero(self): return self.Numero
    def set_Numero(self, Numero): self.Numero = Numero
    def get_Serie(self): return self.Serie
    def set_Serie(self, Serie): self.Serie = Serie
    def get_Tipo(self): return self.Tipo
    def set_Tipo(self, Tipo): self.Tipo = Tipo
    def validate_TsNumeroRps(self, value):
        # Validate type TsNumeroRps, a restriction on xs:long.
        pass
    def validate_TsSerieRps(self, value):
        # Validate type TsSerieRps, a restriction on xs:string.
        pass
    def validate_TsTipoRps(self, value):
        # Validate type TsTipoRps, a restriction on xs:int.
        pass
    def hasContent_(self):
        if (
            self.Numero is not None or
            self.Serie is not None or
            self.Tipo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcIdentificacaoRps', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcIdentificacaoRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcIdentificacaoRps'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcIdentificacaoRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespace_, self.gds_format_integer(self.Numero, input_name='Numero'), namespace_, eol_))
        if self.Serie is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerie>%s</%sSerie>%s' % (namespace_, self.gds_format_string(quote_xml(self.Serie).encode(ExternalEncoding), input_name='Serie'), namespace_, eol_))
        if self.Tipo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTipo>%s</%sTipo>%s' % (namespace_, self.gds_format_integer(self.Tipo, input_name='Tipo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='tcIdentificacaoRps'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Numero is not None:
            showIndent(outfile, level)
            outfile.write('Numero=%d,\n' % self.Numero)
        if self.Serie is not None:
            showIndent(outfile, level)
            outfile.write('Serie=%s,\n' % quote_python(self.Serie).encode(ExternalEncoding))
        if self.Tipo is not None:
            showIndent(outfile, level)
            outfile.write('Tipo=%d,\n' % self.Tipo)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Numero':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Numero')
            self.Numero = ival_
            self.validate_TsNumeroRps(self.Numero)    # validate type TsNumeroRps
        elif nodeName_ == 'Serie':
            Serie_ = child_.text
            Serie_ = self.gds_validate_string(Serie_, node, 'Serie')
            self.Serie = Serie_
            self.validate_TsSerieRps(self.Serie)    # validate type TsSerieRps
        elif nodeName_ == 'Tipo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Tipo')
            self.Tipo = ival_
            self.validate_TsTipoRps(self.Tipo)    # validate type TsTipoRps
# end class tcIdentificacaoRps


class TcDadosServico(GeneratedsSuper):
    """Representa dados que compõem o serviço prestado"""
    subclass = None
    superclass = None
    def __init__(self, Valores=None, ItemListaServico=None, CodigoCnae=None, CodigoTributacaoMunicipio=None, Discriminacao=None, CodigoMunicipio=None):
        self.Valores = Valores
        self.ItemListaServico = ItemListaServico
        self.CodigoCnae = CodigoCnae
        self.CodigoTributacaoMunicipio = CodigoTributacaoMunicipio
        self.Discriminacao = Discriminacao
        self.CodigoMunicipio = CodigoMunicipio
    def factory(*args_, **kwargs_):
        if TcDadosServico.subclass:
            return TcDadosServico.subclass(*args_, **kwargs_)
        else:
            return TcDadosServico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Valores(self): return self.Valores
    def set_Valores(self, Valores): self.Valores = Valores
    def get_ItemListaServico(self): return self.ItemListaServico
    def set_ItemListaServico(self, ItemListaServico): self.ItemListaServico = ItemListaServico
    def get_CodigoCnae(self): return self.CodigoCnae
    def set_CodigoCnae(self, CodigoCnae): self.CodigoCnae = CodigoCnae
    def get_CodigoTributacaoMunicipio(self): return self.CodigoTributacaoMunicipio
    def set_CodigoTributacaoMunicipio(self, CodigoTributacaoMunicipio): self.CodigoTributacaoMunicipio = CodigoTributacaoMunicipio
    def get_Discriminacao(self): return self.Discriminacao
    def set_Discriminacao(self, Discriminacao): self.Discriminacao = Discriminacao
    def get_CodigoMunicipio(self): return self.CodigoMunicipio
    def set_CodigoMunicipio(self, CodigoMunicipio): self.CodigoMunicipio = CodigoMunicipio
    def validate_tsItemListaServico(self, value):
        # Validate type tsItemListaServico, a restriction on xs:string.
        pass
    def validate_TsCodigoCnae(self, value):
        # Validate type TsCodigoCnae, a restriction on xs:long.
        pass
    def validate_tsCodigoTributacao(self, value):
        # Validate type tsCodigoTributacao, a restriction on xs:string.
        pass
    def validate_tsDiscriminacao(self, value):
        # Validate type tsDiscriminacao, a restriction on xs:string.
        pass
    def validate_tsCodigoMunicipioIbge(self, value):
        # Validate type tsCodigoMunicipioIbge, a restriction on xs:long.
        pass
    def hasContent_(self):
        if (
            self.Valores is not None or
            self.ItemListaServico is not None or
            self.CodigoCnae is not None or
            self.CodigoTributacaoMunicipio is not None or
            self.Discriminacao is not None or
            self.CodigoMunicipio is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TcDadosServico', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TcDadosServico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TcDadosServico'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TcDadosServico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Valores is not None:
            self.Valores.export(outfile, level, namespace_, name_='Valores', pretty_print=pretty_print)
        if self.ItemListaServico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemListaServico>%s</%sItemListaServico>%s' % (namespace_, self.gds_format_string(quote_xml(self.ItemListaServico).encode(ExternalEncoding), input_name='ItemListaServico'), namespace_, eol_))
        if self.CodigoCnae is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoCnae>%s</%sCodigoCnae>%s' % (namespace_, self.gds_format_integer(self.CodigoCnae, input_name='CodigoCnae'), namespace_, eol_))
        if self.CodigoTributacaoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoTributacaoMunicipio>%s</%sCodigoTributacaoMunicipio>%s' % (namespace_, self.gds_format_string(quote_xml(self.CodigoTributacaoMunicipio).encode(ExternalEncoding), input_name='CodigoTributacaoMunicipio'), namespace_, eol_))
        if self.Discriminacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscriminacao>%s</%sDiscriminacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.Discriminacao).encode(ExternalEncoding), input_name='Discriminacao'), namespace_, eol_))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoMunicipio>%s</%sCodigoMunicipio>%s' % (namespace_, self.gds_format_integer(self.CodigoMunicipio, input_name='CodigoMunicipio'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='TcDadosServico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Valores is not None:
            showIndent(outfile, level)
            outfile.write('Valores=model_.TcValores(\n')
            self.Valores.exportLiteral(outfile, level, name_='Valores')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemListaServico is not None:
            showIndent(outfile, level)
            outfile.write('ItemListaServico=%s,\n' % quote_python(self.ItemListaServico).encode(ExternalEncoding))
        if self.CodigoCnae is not None:
            showIndent(outfile, level)
            outfile.write('CodigoCnae=%d,\n' % self.CodigoCnae)
        if self.CodigoTributacaoMunicipio is not None:
            showIndent(outfile, level)
            outfile.write('CodigoTributacaoMunicipio=%s,\n' % quote_python(self.CodigoTributacaoMunicipio).encode(ExternalEncoding))
        if self.Discriminacao is not None:
            showIndent(outfile, level)
            outfile.write('Discriminacao=%s,\n' % quote_python(self.Discriminacao).encode(ExternalEncoding))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level)
            outfile.write('CodigoMunicipio=%d,\n' % self.CodigoMunicipio)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Valores':
            obj_ = TcValores.factory()
            obj_.build(child_)
            self.Valores = obj_
        elif nodeName_ == 'ItemListaServico':
            ItemListaServico_ = child_.text
            ItemListaServico_ = self.gds_validate_string(ItemListaServico_, node, 'ItemListaServico')
            self.ItemListaServico = ItemListaServico_
            self.validate_tsItemListaServico(self.ItemListaServico)    # validate type tsItemListaServico
        elif nodeName_ == 'CodigoCnae':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoCnae')
            self.CodigoCnae = ival_
            self.validate_TsCodigoCnae(self.CodigoCnae)    # validate type TsCodigoCnae
        elif nodeName_ == 'CodigoTributacaoMunicipio':
            CodigoTributacaoMunicipio_ = child_.text
            CodigoTributacaoMunicipio_ = self.gds_validate_string(CodigoTributacaoMunicipio_, node, 'CodigoTributacaoMunicipio')
            self.CodigoTributacaoMunicipio = CodigoTributacaoMunicipio_
            self.validate_tsCodigoTributacao(self.CodigoTributacaoMunicipio)    # validate type tsCodigoTributacao
        elif nodeName_ == 'Discriminacao':
            Discriminacao_ = child_.text
            Discriminacao_ = self.gds_validate_string(Discriminacao_, node, 'Discriminacao')
            self.Discriminacao = Discriminacao_
            self.validate_tsDiscriminacao(self.Discriminacao)    # validate type tsDiscriminacao
        elif nodeName_ == 'CodigoMunicipio':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoMunicipio')
            self.CodigoMunicipio = ival_
            self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)    # validate type tsCodigoMunicipioIbge
# end class TcDadosServico


class TcValores(GeneratedsSuper):
    """Representa um conjunto de valores que compõe o documento fiscal"""
    subclass = None
    superclass = None
    def __init__(self, ValorServicos=None, ValorDeducoes=None, ValorPis=None, ValorCofins=None, ValorInss=None, ValorIr=None, ValorCsll=None, IssRetido=None, ValorIss=None, OutrasRetencoes=None, BaseCalculo=None, Aliquota=None, ValorLiquidoNfse=None, ValorIssRetido=None, DescontoCondicionado=None, DescontoIncondicionado=None):
        self.ValorServicos = ValorServicos
        self.ValorDeducoes = ValorDeducoes
        self.ValorPis = ValorPis
        self.ValorCofins = ValorCofins
        self.ValorInss = ValorInss
        self.ValorIr = ValorIr
        self.ValorCsll = ValorCsll
        self.IssRetido = IssRetido
        self.ValorIss = ValorIss
        self.OutrasRetencoes = OutrasRetencoes
        self.BaseCalculo = BaseCalculo
        self.Aliquota = Aliquota
        self.ValorLiquidoNfse = ValorLiquidoNfse
        self.ValorIssRetido = ValorIssRetido
        self.DescontoCondicionado = DescontoCondicionado
        self.DescontoIncondicionado = DescontoIncondicionado
    def factory(*args_, **kwargs_):
        if TcValores.subclass:
            return TcValores.subclass(*args_, **kwargs_)
        else:
            return TcValores(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ValorServicos(self): return self.ValorServicos
    def set_ValorServicos(self, ValorServicos): self.ValorServicos = ValorServicos
    def get_ValorDeducoes(self): return self.ValorDeducoes
    def set_ValorDeducoes(self, ValorDeducoes): self.ValorDeducoes = ValorDeducoes
    def get_ValorPis(self): return self.ValorPis
    def set_ValorPis(self, ValorPis): self.ValorPis = ValorPis
    def get_ValorCofins(self): return self.ValorCofins
    def set_ValorCofins(self, ValorCofins): self.ValorCofins = ValorCofins
    def get_ValorInss(self): return self.ValorInss
    def set_ValorInss(self, ValorInss): self.ValorInss = ValorInss
    def get_ValorIr(self): return self.ValorIr
    def set_ValorIr(self, ValorIr): self.ValorIr = ValorIr
    def get_ValorCsll(self): return self.ValorCsll
    def set_ValorCsll(self, ValorCsll): self.ValorCsll = ValorCsll
    def get_IssRetido(self): return self.IssRetido
    def set_IssRetido(self, IssRetido): self.IssRetido = IssRetido
    def get_ValorIss(self): return self.ValorIss
    def set_ValorIss(self, ValorIss): self.ValorIss = ValorIss
    def get_OutrasRetencoes(self): return self.OutrasRetencoes
    def set_OutrasRetencoes(self, OutrasRetencoes): self.OutrasRetencoes = OutrasRetencoes
    def get_BaseCalculo(self): return self.BaseCalculo
    def set_BaseCalculo(self, BaseCalculo): self.BaseCalculo = BaseCalculo
    def get_Aliquota(self): return self.Aliquota
    def set_Aliquota(self, Aliquota): self.Aliquota = Aliquota
    def get_ValorLiquidoNfse(self): return self.ValorLiquidoNfse
    def set_ValorLiquidoNfse(self, ValorLiquidoNfse): self.ValorLiquidoNfse = ValorLiquidoNfse
    def get_ValorIssRetido(self): return self.ValorIssRetido
    def set_ValorIssRetido(self, ValorIssRetido): self.ValorIssRetido = ValorIssRetido
    def get_DescontoCondicionado(self): return self.DescontoCondicionado
    def set_DescontoCondicionado(self, DescontoCondicionado): self.DescontoCondicionado = DescontoCondicionado
    def get_DescontoIncondicionado(self): return self.DescontoIncondicionado
    def set_DescontoIncondicionado(self, DescontoIncondicionado): self.DescontoIncondicionado = DescontoIncondicionado
    def validate_TsValor(self, value):
        # Validate type TsValor, a restriction on xs:decimal.
        pass
    def validate_TsSituacaoTributaria(self, value):
        # Validate type TsSituacaoTributaria, a restriction on xs:int.
        pass
    def validate_TsAliquota(self, value):
        # Validate type TsAliquota, a restriction on xs:decimal.
        pass
    def hasContent_(self):
        if (
            self.ValorServicos is not None or
            self.ValorDeducoes is not None or
            self.ValorPis is not None or
            self.ValorCofins is not None or
            self.ValorInss is not None or
            self.ValorIr is not None or
            self.ValorCsll is not None or
            self.IssRetido is not None or
            self.ValorIss is not None or
            self.OutrasRetencoes is not None or
            self.BaseCalculo is not None or
            self.Aliquota is not None or
            self.ValorLiquidoNfse is not None or
            self.ValorIssRetido is not None or
            self.DescontoCondicionado is not None or
            self.DescontoIncondicionado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TcValores', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TcValores')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TcValores'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TcValores', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ValorServicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorServicos>%s</%sValorServicos>%s' % (namespace_, self.gds_format_float(self.ValorServicos, input_name='ValorServicos'), namespace_, eol_))
        if self.ValorDeducoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorDeducoes>%s</%sValorDeducoes>%s' % (namespace_, self.gds_format_float(self.ValorDeducoes, input_name='ValorDeducoes'), namespace_, eol_))
        if self.ValorPis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorPis>%s</%sValorPis>%s' % (namespace_, self.gds_format_float(self.ValorPis, input_name='ValorPis'), namespace_, eol_))
        if self.ValorCofins is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCofins>%s</%sValorCofins>%s' % (namespace_, self.gds_format_float(self.ValorCofins, input_name='ValorCofins'), namespace_, eol_))
        if self.ValorInss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorInss>%s</%sValorInss>%s' % (namespace_, self.gds_format_float(self.ValorInss, input_name='ValorInss'), namespace_, eol_))
        if self.ValorIr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIr>%s</%sValorIr>%s' % (namespace_, self.gds_format_float(self.ValorIr, input_name='ValorIr'), namespace_, eol_))
        if self.ValorCsll is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCsll>%s</%sValorCsll>%s' % (namespace_, self.gds_format_float(self.ValorCsll, input_name='ValorCsll'), namespace_, eol_))
        if self.IssRetido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIssRetido>%s</%sIssRetido>%s' % (namespace_, self.gds_format_integer(self.IssRetido, input_name='IssRetido'), namespace_, eol_))
        if self.ValorIss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIss>%s</%sValorIss>%s' % (namespace_, self.gds_format_float(self.ValorIss, input_name='ValorIss'), namespace_, eol_))
        if self.OutrasRetencoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutrasRetencoes>%s</%sOutrasRetencoes>%s' % (namespace_, self.gds_format_float(self.OutrasRetencoes, input_name='OutrasRetencoes'), namespace_, eol_))
        if self.BaseCalculo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaseCalculo>%s</%sBaseCalculo>%s' % (namespace_, self.gds_format_float(self.BaseCalculo, input_name='BaseCalculo'), namespace_, eol_))
        if self.Aliquota is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAliquota>%s</%sAliquota>%s' % (namespace_, self.gds_format_float(self.Aliquota, input_name='Aliquota'), namespace_, eol_))
        if self.ValorLiquidoNfse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorLiquidoNfse>%s</%sValorLiquidoNfse>%s' % (namespace_, self.gds_format_float(self.ValorLiquidoNfse, input_name='ValorLiquidoNfse'), namespace_, eol_))
        if self.ValorIssRetido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIssRetido>%s</%sValorIssRetido>%s' % (namespace_, self.gds_format_float(self.ValorIssRetido, input_name='ValorIssRetido'), namespace_, eol_))
        if self.DescontoCondicionado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescontoCondicionado>%s</%sDescontoCondicionado>%s' % (namespace_, self.gds_format_float(self.DescontoCondicionado, input_name='DescontoCondicionado'), namespace_, eol_))
        if self.DescontoIncondicionado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescontoIncondicionado>%s</%sDescontoIncondicionado>%s' % (namespace_, self.gds_format_float(self.DescontoIncondicionado, input_name='DescontoIncondicionado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='TcValores'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ValorServicos is not None:
            showIndent(outfile, level)
            outfile.write('ValorServicos=%f,\n' % self.ValorServicos)
        if self.ValorDeducoes is not None:
            showIndent(outfile, level)
            outfile.write('ValorDeducoes=%f,\n' % self.ValorDeducoes)
        if self.ValorPis is not None:
            showIndent(outfile, level)
            outfile.write('ValorPis=%f,\n' % self.ValorPis)
        if self.ValorCofins is not None:
            showIndent(outfile, level)
            outfile.write('ValorCofins=%f,\n' % self.ValorCofins)
        if self.ValorInss is not None:
            showIndent(outfile, level)
            outfile.write('ValorInss=%f,\n' % self.ValorInss)
        if self.ValorIr is not None:
            showIndent(outfile, level)
            outfile.write('ValorIr=%f,\n' % self.ValorIr)
        if self.ValorCsll is not None:
            showIndent(outfile, level)
            outfile.write('ValorCsll=%f,\n' % self.ValorCsll)
        if self.IssRetido is not None:
            showIndent(outfile, level)
            outfile.write('IssRetido=%d,\n' % self.IssRetido)
        if self.ValorIss is not None:
            showIndent(outfile, level)
            outfile.write('ValorIss=%f,\n' % self.ValorIss)
        if self.OutrasRetencoes is not None:
            showIndent(outfile, level)
            outfile.write('OutrasRetencoes=%f,\n' % self.OutrasRetencoes)
        if self.BaseCalculo is not None:
            showIndent(outfile, level)
            outfile.write('BaseCalculo=%f,\n' % self.BaseCalculo)
        if self.Aliquota is not None:
            showIndent(outfile, level)
            outfile.write('Aliquota=%f,\n' % self.Aliquota)
        if self.ValorLiquidoNfse is not None:
            showIndent(outfile, level)
            outfile.write('ValorLiquidoNfse=%f,\n' % self.ValorLiquidoNfse)
        if self.ValorIssRetido is not None:
            showIndent(outfile, level)
            outfile.write('ValorIssRetido=%f,\n' % self.ValorIssRetido)
        if self.DescontoCondicionado is not None:
            showIndent(outfile, level)
            outfile.write('DescontoCondicionado=%f,\n' % self.DescontoCondicionado)
        if self.DescontoIncondicionado is not None:
            showIndent(outfile, level)
            outfile.write('DescontoIncondicionado=%f,\n' % self.DescontoIncondicionado)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ValorServicos':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorServicos')
            self.ValorServicos = fval_
            self.validate_TsValor(self.ValorServicos)    # validate type TsValor
        elif nodeName_ == 'ValorDeducoes':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorDeducoes')
            self.ValorDeducoes = fval_
            self.validate_TsValor(self.ValorDeducoes)    # validate type TsValor
        elif nodeName_ == 'ValorPis':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorPis')
            self.ValorPis = fval_
            self.validate_TsValor(self.ValorPis)    # validate type TsValor
        elif nodeName_ == 'ValorCofins':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCofins')
            self.ValorCofins = fval_
            self.validate_TsValor(self.ValorCofins)    # validate type TsValor
        elif nodeName_ == 'ValorInss':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorInss')
            self.ValorInss = fval_
            self.validate_TsValor(self.ValorInss)    # validate type TsValor
        elif nodeName_ == 'ValorIr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIr')
            self.ValorIr = fval_
            self.validate_TsValor(self.ValorIr)    # validate type TsValor
        elif nodeName_ == 'ValorCsll':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCsll')
            self.ValorCsll = fval_
            self.validate_TsValor(self.ValorCsll)    # validate type TsValor
        elif nodeName_ == 'IssRetido':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IssRetido')
            self.IssRetido = ival_
            self.validate_TsSituacaoTributaria(self.IssRetido)    # validate type TsSituacaoTributaria
        elif nodeName_ == 'ValorIss':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIss')
            self.ValorIss = fval_
            self.validate_TsValor(self.ValorIss)    # validate type TsValor
        elif nodeName_ == 'OutrasRetencoes':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OutrasRetencoes')
            self.OutrasRetencoes = fval_
            self.validate_TsValor(self.OutrasRetencoes)    # validate type TsValor
        elif nodeName_ == 'BaseCalculo':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BaseCalculo')
            self.BaseCalculo = fval_
            self.validate_TsValor(self.BaseCalculo)    # validate type TsValor
        elif nodeName_ == 'Aliquota':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Aliquota')
            self.Aliquota = fval_
            self.validate_TsAliquota(self.Aliquota)    # validate type TsAliquota
        elif nodeName_ == 'ValorLiquidoNfse':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorLiquidoNfse')
            self.ValorLiquidoNfse = fval_
            self.validate_TsValor(self.ValorLiquidoNfse)    # validate type TsValor
        elif nodeName_ == 'ValorIssRetido':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIssRetido')
            self.ValorIssRetido = fval_
            self.validate_TsValor(self.ValorIssRetido)    # validate type TsValor
        elif nodeName_ == 'DescontoCondicionado':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DescontoCondicionado')
            self.DescontoCondicionado = fval_
            self.validate_TsValor(self.DescontoCondicionado)    # validate type TsValor
        elif nodeName_ == 'DescontoIncondicionado':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DescontoIncondicionado')
            self.DescontoIncondicionado = fval_
            self.validate_TsValor(self.DescontoIncondicionado)    # validate type TsValor
# end class TcValores


class tcDadosTomador(GeneratedsSuper):
    """Representa dados do tomador de serviços"""
    subclass = None
    superclass = None
    def __init__(self, IdentificacaoTomador=None, RazaoSocial=None, Endereco=None, Contato=None):
        self.IdentificacaoTomador = IdentificacaoTomador
        self.RazaoSocial = RazaoSocial
        self.Endereco = Endereco
        self.Contato = Contato
    def factory(*args_, **kwargs_):
        if tcDadosTomador.subclass:
            return tcDadosTomador.subclass(*args_, **kwargs_)
        else:
            return tcDadosTomador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificacaoTomador(self): return self.IdentificacaoTomador
    def set_IdentificacaoTomador(self, IdentificacaoTomador): self.IdentificacaoTomador = IdentificacaoTomador
    def get_RazaoSocial(self): return self.RazaoSocial
    def set_RazaoSocial(self, RazaoSocial): self.RazaoSocial = RazaoSocial
    def get_Endereco(self): return self.Endereco
    def set_Endereco(self, Endereco): self.Endereco = Endereco
    def get_Contato(self): return self.Contato
    def set_Contato(self, Contato): self.Contato = Contato
    def validate_tsRazaoSocial(self, value):
        # Validate type tsRazaoSocial, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.IdentificacaoTomador is not None or
            self.RazaoSocial is not None or
            self.Endereco is not None or
            self.Contato is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcDadosTomador', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcDadosTomador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcDadosTomador'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcDadosTomador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoTomador is not None:
            self.IdentificacaoTomador.export(outfile, level, namespace_, name_='IdentificacaoTomador', pretty_print=pretty_print)
        if self.RazaoSocial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocial>%s</%sRazaoSocial>%s' % (namespace_, self.gds_format_string(quote_xml(self.RazaoSocial).encode(ExternalEncoding), input_name='RazaoSocial'), namespace_, eol_))
        if self.Endereco is not None:
            self.Endereco.export(outfile, level, namespace_, name_='Endereco', pretty_print=pretty_print)
        if self.Contato is not None:
            self.Contato.export(outfile, level, namespace_, name_='Contato', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='tcDadosTomador'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.IdentificacaoTomador is not None:
            showIndent(outfile, level)
            outfile.write('IdentificacaoTomador=model_.tcIdentificacaoTomador(\n')
            self.IdentificacaoTomador.exportLiteral(outfile, level, name_='IdentificacaoTomador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RazaoSocial is not None:
            showIndent(outfile, level)
            outfile.write('RazaoSocial=%s,\n' % quote_python(self.RazaoSocial).encode(ExternalEncoding))
        if self.Endereco is not None:
            showIndent(outfile, level)
            outfile.write('Endereco=model_.TcEndereco(\n')
            self.Endereco.exportLiteral(outfile, level, name_='Endereco')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Contato is not None:
            showIndent(outfile, level)
            outfile.write('Contato=model_.TcContato(\n')
            self.Contato.exportLiteral(outfile, level, name_='Contato')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoTomador':
            obj_ = tcIdentificacaoTomador.factory()
            obj_.build(child_)
            self.IdentificacaoTomador = obj_
        elif nodeName_ == 'RazaoSocial':
            RazaoSocial_ = child_.text
            RazaoSocial_ = self.gds_validate_string(RazaoSocial_, node, 'RazaoSocial')
            self.RazaoSocial = RazaoSocial_
            self.validate_tsRazaoSocial(self.RazaoSocial)    # validate type tsRazaoSocial
        elif nodeName_ == 'Endereco':
            obj_ = TcEndereco.factory()
            obj_.build(child_)
            self.Endereco = obj_
        elif nodeName_ == 'Contato':
            obj_ = TcContato.factory()
            obj_.build(child_)
            self.Contato = obj_
# end class tcDadosTomador


class TcEndereco(GeneratedsSuper):
    """Representação completa do endereço"""
    subclass = None
    superclass = None
    def __init__(self, Endereco=None, Numero=None, Complemento=None, Bairro=None, CodigoMunicipio=None, Uf=None, Cep=None):
        self.Endereco = Endereco
        self.Numero = Numero
        self.Complemento = Complemento
        self.Bairro = Bairro
        self.CodigoMunicipio = CodigoMunicipio
        self.Uf = Uf
        self.Cep = Cep
    def factory(*args_, **kwargs_):
        if TcEndereco.subclass:
            return TcEndereco.subclass(*args_, **kwargs_)
        else:
            return TcEndereco(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Endereco(self): return self.Endereco
    def set_Endereco(self, Endereco): self.Endereco = Endereco
    def get_Numero(self): return self.Numero
    def set_Numero(self, Numero): self.Numero = Numero
    def get_Complemento(self): return self.Complemento
    def set_Complemento(self, Complemento): self.Complemento = Complemento
    def get_Bairro(self): return self.Bairro
    def set_Bairro(self, Bairro): self.Bairro = Bairro
    def get_CodigoMunicipio(self): return self.CodigoMunicipio
    def set_CodigoMunicipio(self, CodigoMunicipio): self.CodigoMunicipio = CodigoMunicipio
    def get_Uf(self): return self.Uf
    def set_Uf(self, Uf): self.Uf = Uf
    def get_Cep(self): return self.Cep
    def set_Cep(self, Cep): self.Cep = Cep
    def validate_tsEndereco(self, value):
        # Validate type tsEndereco, a restriction on xs:string.
        pass
    def validate_tsNumeroEndereco(self, value):
        # Validate type tsNumeroEndereco, a restriction on xs:string.
        pass
    def validate_tsComplementoEndereco(self, value):
        # Validate type tsComplementoEndereco, a restriction on xs:string.
        pass
    def validate_tsBairro(self, value):
        # Validate type tsBairro, a restriction on xs:string.
        pass
    def validate_tsCodigoMunicipioIbge(self, value):
        # Validate type tsCodigoMunicipioIbge, a restriction on xs:long.
        pass
    def validate_tsUf(self, value):
        # Validate type tsUf, a restriction on xs:string.
        pass
    def validate_tsCep(self, value):
        # Validate type tsCep, a restriction on xs:int.
        pass
    def hasContent_(self):
        if (
            self.Endereco is not None or
            self.Numero is not None or
            self.Complemento is not None or
            self.Bairro is not None or
            self.CodigoMunicipio is not None or
            self.Uf is not None or
            self.Cep is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TcEndereco', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TcEndereco')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TcEndereco'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TcEndereco', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Endereco is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndereco>%s</%sEndereco>%s' % (namespace_, self.gds_format_string(quote_xml(self.Endereco).encode(ExternalEncoding), input_name='Endereco'), namespace_, eol_))
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespace_, self.gds_format_string(quote_xml(self.Numero).encode(ExternalEncoding), input_name='Numero'), namespace_, eol_))
        if self.Complemento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComplemento>%s</%sComplemento>%s' % (namespace_, self.gds_format_string(quote_xml(self.Complemento).encode(ExternalEncoding), input_name='Complemento'), namespace_, eol_))
        if self.Bairro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBairro>%s</%sBairro>%s' % (namespace_, self.gds_format_string(quote_xml(self.Bairro).encode(ExternalEncoding), input_name='Bairro'), namespace_, eol_))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoMunicipio>%s</%sCodigoMunicipio>%s' % (namespace_, self.gds_format_integer(self.CodigoMunicipio, input_name='CodigoMunicipio'), namespace_, eol_))
        if self.Uf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUf>%s</%sUf>%s' % (namespace_, self.gds_format_string(quote_xml(self.Uf).encode(ExternalEncoding), input_name='Uf'), namespace_, eol_))
        if self.Cep is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCep>%s</%sCep>%s' % (namespace_, self.gds_format_integer(self.Cep, input_name='Cep'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='TcEndereco'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Endereco is not None:
            showIndent(outfile, level)
            outfile.write('Endereco=%s,\n' % quote_python(self.Endereco).encode(ExternalEncoding))
        if self.Numero is not None:
            showIndent(outfile, level)
            outfile.write('Numero=%s,\n' % quote_python(self.Numero).encode(ExternalEncoding))
        if self.Complemento is not None:
            showIndent(outfile, level)
            outfile.write('Complemento=%s,\n' % quote_python(self.Complemento).encode(ExternalEncoding))
        if self.Bairro is not None:
            showIndent(outfile, level)
            outfile.write('Bairro=%s,\n' % quote_python(self.Bairro).encode(ExternalEncoding))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level)
            outfile.write('CodigoMunicipio=%d,\n' % self.CodigoMunicipio)
        if self.Uf is not None:
            showIndent(outfile, level)
            outfile.write('Uf=%s,\n' % quote_python(self.Uf).encode(ExternalEncoding))
        if self.Cep is not None:
            showIndent(outfile, level)
            outfile.write('Cep=%d,\n' % self.Cep)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Endereco':
            Endereco_ = child_.text
            Endereco_ = self.gds_validate_string(Endereco_, node, 'Endereco')
            self.Endereco = Endereco_
            self.validate_tsEndereco(self.Endereco)    # validate type tsEndereco
        elif nodeName_ == 'Numero':
            Numero_ = child_.text
            Numero_ = self.gds_validate_string(Numero_, node, 'Numero')
            self.Numero = Numero_
            self.validate_tsNumeroEndereco(self.Numero)    # validate type tsNumeroEndereco
        elif nodeName_ == 'Complemento':
            Complemento_ = child_.text
            Complemento_ = self.gds_validate_string(Complemento_, node, 'Complemento')
            self.Complemento = Complemento_
            self.validate_tsComplementoEndereco(self.Complemento)    # validate type tsComplementoEndereco
        elif nodeName_ == 'Bairro':
            Bairro_ = child_.text
            Bairro_ = self.gds_validate_string(Bairro_, node, 'Bairro')
            self.Bairro = Bairro_
            self.validate_tsBairro(self.Bairro)    # validate type tsBairro
        elif nodeName_ == 'CodigoMunicipio':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoMunicipio')
            self.CodigoMunicipio = ival_
            self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)    # validate type tsCodigoMunicipioIbge
        elif nodeName_ == 'Uf':
            Uf_ = child_.text
            Uf_ = self.gds_validate_string(Uf_, node, 'Uf')
            self.Uf = Uf_
            self.validate_tsUf(self.Uf)    # validate type tsUf
        elif nodeName_ == 'Cep':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Cep')
            self.Cep = ival_
            self.validate_tsCep(self.Cep)    # validate type tsCep
# end class TcEndereco


class TcContato(GeneratedsSuper):
    """Representa a forma de contato com a pessoa (física/jurídica)"""
    subclass = None
    superclass = None
    def __init__(self, Telefone=None, Email=None):
        self.Telefone = Telefone
        self.Email = Email
    def factory(*args_, **kwargs_):
        if TcContato.subclass:
            return TcContato.subclass(*args_, **kwargs_)
        else:
            return TcContato(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Telefone(self): return self.Telefone
    def set_Telefone(self, Telefone): self.Telefone = Telefone
    def get_Email(self): return self.Email
    def set_Email(self, Email): self.Email = Email
    def validate_tsTelefone(self, value):
        # Validate type tsTelefone, a restriction on xs:string.
        pass
    def validate_tsEmail(self, value):
        # Validate type tsEmail, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.Telefone is not None or
            self.Email is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TcContato', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TcContato')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TcContato'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TcContato', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Telefone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTelefone>%s</%sTelefone>%s' % (namespace_, self.gds_format_string(quote_xml(self.Telefone).encode(ExternalEncoding), input_name='Telefone'), namespace_, eol_))
        if self.Email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmail>%s</%sEmail>%s' % (namespace_, self.gds_format_string(quote_xml(self.Email).encode(ExternalEncoding), input_name='Email'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='TcContato'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Telefone is not None:
            showIndent(outfile, level)
            outfile.write('Telefone=%s,\n' % quote_python(self.Telefone).encode(ExternalEncoding))
        if self.Email is not None:
            showIndent(outfile, level)
            outfile.write('Email=%s,\n' % quote_python(self.Email).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Telefone':
            Telefone_ = child_.text
            Telefone_ = self.gds_validate_string(Telefone_, node, 'Telefone')
            self.Telefone = Telefone_
            self.validate_tsTelefone(self.Telefone)    # validate type tsTelefone
        elif nodeName_ == 'Email':
            Email_ = child_.text
            Email_ = self.gds_validate_string(Email_, node, 'Email')
            self.Email = Email_
            self.validate_tsEmail(self.Email)    # validate type tsEmail
# end class TcContato


class tcDadosConstrucaoCivil(GeneratedsSuper):
    """Representa dados para identificação de construção civil"""
    subclass = None
    superclass = None
    def __init__(self, CodigoObra=None, Art=None):
        self.CodigoObra = CodigoObra
        self.Art = Art
    def factory(*args_, **kwargs_):
        if tcDadosConstrucaoCivil.subclass:
            return tcDadosConstrucaoCivil.subclass(*args_, **kwargs_)
        else:
            return tcDadosConstrucaoCivil(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CodigoObra(self): return self.CodigoObra
    def set_CodigoObra(self, CodigoObra): self.CodigoObra = CodigoObra
    def get_Art(self): return self.Art
    def set_Art(self, Art): self.Art = Art
    def validate_tsCodigoObra(self, value):
        # Validate type tsCodigoObra, a restriction on xs:string.
        pass
    def validate_tsArt(self, value):
        # Validate type tsArt, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.CodigoObra is not None or
            self.Art is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcDadosConstrucaoCivil', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcDadosConstrucaoCivil')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcDadosConstrucaoCivil'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcDadosConstrucaoCivil', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodigoObra is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoObra>%s</%sCodigoObra>%s' % (namespace_, self.gds_format_string(quote_xml(self.CodigoObra).encode(ExternalEncoding), input_name='CodigoObra'), namespace_, eol_))
        if self.Art is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sArt>%s</%sArt>%s' % (namespace_, self.gds_format_string(quote_xml(self.Art).encode(ExternalEncoding), input_name='Art'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='tcDadosConstrucaoCivil'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CodigoObra is not None:
            showIndent(outfile, level)
            outfile.write('CodigoObra=%s,\n' % quote_python(self.CodigoObra).encode(ExternalEncoding))
        if self.Art is not None:
            showIndent(outfile, level)
            outfile.write('Art=%s,\n' % quote_python(self.Art).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CodigoObra':
            CodigoObra_ = child_.text
            CodigoObra_ = self.gds_validate_string(CodigoObra_, node, 'CodigoObra')
            self.CodigoObra = CodigoObra_
            self.validate_tsCodigoObra(self.CodigoObra)    # validate type tsCodigoObra
        elif nodeName_ == 'Art':
            Art_ = child_.text
            Art_ = self.gds_validate_string(Art_, node, 'Art')
            self.Art = Art_
            self.validate_tsArt(self.Art)    # validate type tsArt
# end class tcDadosConstrucaoCivil


class tcPedidoCancelamento(GeneratedsSuper):
    """Representa dados para o pedido de cancelamento de uma nota fiscal"""
    subclass = None
    superclass = None
    def __init__(self, InfPedidoCancelamento=None, Signature=None):
        self.InfPedidoCancelamento = InfPedidoCancelamento
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if tcPedidoCancelamento.subclass:
            return tcPedidoCancelamento.subclass(*args_, **kwargs_)
        else:
            return tcPedidoCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InfPedidoCancelamento(self): return self.InfPedidoCancelamento
    def set_InfPedidoCancelamento(self, InfPedidoCancelamento): self.InfPedidoCancelamento = InfPedidoCancelamento
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def hasContent_(self):
        if (
            self.InfPedidoCancelamento is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcPedidoCancelamento', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcPedidoCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcPedidoCancelamento'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcPedidoCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InfPedidoCancelamento is not None:
            self.InfPedidoCancelamento.export(outfile, level, namespace_, name_='InfPedidoCancelamento', pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(outfile, level, namespace_='ds:', name_='Signature', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='tcPedidoCancelamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.InfPedidoCancelamento is not None:
            showIndent(outfile, level)
            outfile.write('InfPedidoCancelamento=model_.tcInfPedidoCancelamento(\n')
            self.InfPedidoCancelamento.exportLiteral(outfile, level, name_='InfPedidoCancelamento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Signature is not None:
            showIndent(outfile, level)
            outfile.write('Signature=model_.Signature(\n')
            self.Signature.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InfPedidoCancelamento':
            obj_ = tcInfPedidoCancelamento.factory()
            obj_.build(child_)
            self.InfPedidoCancelamento = obj_
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.Signature = obj_
# end class tcPedidoCancelamento


class tcInfPedidoCancelamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, IdentificacaoNfse=None, CodigoCancelamento=None):
        self.Id = _cast(None, Id)
        self.IdentificacaoNfse = IdentificacaoNfse
        self.CodigoCancelamento = CodigoCancelamento
    def factory(*args_, **kwargs_):
        if tcInfPedidoCancelamento.subclass:
            return tcInfPedidoCancelamento.subclass(*args_, **kwargs_)
        else:
            return tcInfPedidoCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificacaoNfse(self): return self.IdentificacaoNfse
    def set_IdentificacaoNfse(self, IdentificacaoNfse): self.IdentificacaoNfse = IdentificacaoNfse
    def get_CodigoCancelamento(self): return self.CodigoCancelamento
    def set_CodigoCancelamento(self, CodigoCancelamento): self.CodigoCancelamento = CodigoCancelamento
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def validate_tsCodigoCancelamentoNfse(self, value):
        # Validate type tsCodigoCancelamentoNfse, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.IdentificacaoNfse is not None or
            self.CodigoCancelamento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcInfPedidoCancelamento', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcInfPedidoCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcInfPedidoCancelamento'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='tcInfPedidoCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoNfse is not None:
            self.IdentificacaoNfse.export(outfile, level, namespace_, name_='IdentificacaoNfse', pretty_print=pretty_print)
        if self.CodigoCancelamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoCancelamento>%s</%sCodigoCancelamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.CodigoCancelamento).encode(ExternalEncoding), input_name='CodigoCancelamento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='tcInfPedidoCancelamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.IdentificacaoNfse is not None:
            showIndent(outfile, level)
            outfile.write('IdentificacaoNfse=model_.tcIdentificacaoNfse(\n')
            self.IdentificacaoNfse.exportLiteral(outfile, level, name_='IdentificacaoNfse')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CodigoCancelamento is not None:
            showIndent(outfile, level)
            outfile.write('CodigoCancelamento=%s,\n' % quote_python(self.CodigoCancelamento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoNfse':
            obj_ = tcIdentificacaoNfse.factory()
            obj_.build(child_)
            self.IdentificacaoNfse = obj_
        elif nodeName_ == 'CodigoCancelamento':
            CodigoCancelamento_ = child_.text
            CodigoCancelamento_ = self.gds_validate_string(CodigoCancelamento_, node, 'CodigoCancelamento')
            self.CodigoCancelamento = CodigoCancelamento_
            self.validate_tsCodigoCancelamentoNfse(self.CodigoCancelamento)    # validate type tsCodigoCancelamentoNfse
# end class tcInfPedidoCancelamento


class tcIdentificacaoNfse(GeneratedsSuper):
    """Representa dados que identificam uma Nota Fiscal de Serviços
    Eletrônica"""
    subclass = None
    superclass = None
    def __init__(self, Numero=None, Cnpj=None, InscricaoMunicipal=None, CodigoMunicipio=None):
        self.Numero = Numero
        self.Cnpj = Cnpj
        self.InscricaoMunicipal = InscricaoMunicipal
        self.CodigoMunicipio = CodigoMunicipio
    def factory(*args_, **kwargs_):
        if tcIdentificacaoNfse.subclass:
            return tcIdentificacaoNfse.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Numero(self): return self.Numero
    def set_Numero(self, Numero): self.Numero = Numero
    def get_Cnpj(self): return self.Cnpj
    def set_Cnpj(self, Cnpj): self.Cnpj = Cnpj
    def get_InscricaoMunicipal(self): return self.InscricaoMunicipal
    def set_InscricaoMunicipal(self, InscricaoMunicipal): self.InscricaoMunicipal = InscricaoMunicipal
    def get_CodigoMunicipio(self): return self.CodigoMunicipio
    def set_CodigoMunicipio(self, CodigoMunicipio): self.CodigoMunicipio = CodigoMunicipio
    def validate_TsNumeroNfse(self, value):
        # Validate type TsNumeroNfse, a restriction on xs:long.
        pass
    def validate_TsCnpj(self, value):
        # Validate type TsCnpj, a restriction on xs:string.
        pass
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xs:long.
        pass
    def validate_tsCodigoMunicipioIbge(self, value):
        # Validate type tsCodigoMunicipioIbge, a restriction on xs:long.
        pass
    def hasContent_(self):
        if (
            self.Numero is not None or
            self.Cnpj is not None or
            self.InscricaoMunicipal is not None or
            self.CodigoMunicipio is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tcIdentificacaoNfse', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tcIdentificacaoNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tcIdentificacaoNfse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tcIdentificacaoNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespace_, self.gds_format_integer(self.Numero, input_name='Numero'), namespace_, eol_))
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cnpj).encode(ExternalEncoding), input_name='Cnpj'), namespace_, eol_))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespace_, self.gds_format_integer(self.InscricaoMunicipal, input_name='InscricaoMunicipal'), namespace_, eol_))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoMunicipio>%s</%sCodigoMunicipio>%s' % (namespace_, self.gds_format_integer(self.CodigoMunicipio, input_name='CodigoMunicipio'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='tcIdentificacaoNfse'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Numero is not None:
            showIndent(outfile, level)
            outfile.write('Numero=%d,\n' % self.Numero)
        if self.Cnpj is not None:
            showIndent(outfile, level)
            outfile.write('Cnpj=%s,\n' % quote_python(self.Cnpj).encode(ExternalEncoding))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoMunicipal=%d,\n' % self.InscricaoMunicipal)
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level)
            outfile.write('CodigoMunicipio=%d,\n' % self.CodigoMunicipio)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Numero':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Numero')
            self.Numero = ival_
            self.validate_TsNumeroNfse(self.Numero)    # validate type TsNumeroNfse
        elif nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            self.validate_TsCnpj(self.Cnpj)    # validate type TsCnpj
        elif nodeName_ == 'InscricaoMunicipal':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = ival_
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)    # validate type tsInscricaoMunicipal
        elif nodeName_ == 'CodigoMunicipio':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoMunicipio')
            self.CodigoMunicipio = ival_
            self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)    # validate type tsCodigoMunicipioIbge
# end class tcIdentificacaoNfse


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None):
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo
    def factory(*args_, **kwargs_):
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignedInfo(self): return self.SignedInfo
    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo
    def get_SignatureValue(self): return self.SignatureValue
    def set_SignatureValue(self, SignatureValue): self.SignatureValue = SignatureValue
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignatureType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            self.SignedInfo.export(outfile, level, namespace_, name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            self.SignatureValue.export(outfile, level, namespace_, name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespace_, name_='KeyInfo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SignatureType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SignedInfo is not None:
            showIndent(outfile, level)
            outfile.write('SignedInfo=model_.SignedInfoType(\n')
            self.SignedInfo.exportLiteral(outfile, level, name_='SignedInfo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureValue is not None:
            showIndent(outfile, level)
            outfile.write('SignatureValue=model_.SignatureValueType(\n')
            self.SignatureValue.exportLiteral(outfile, level, name_='SignatureValue')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.KeyInfo is not None:
            showIndent(outfile, level)
            outfile.write('KeyInfo=model_.KeyInfoType(\n')
            self.KeyInfo.exportLiteral(outfile, level, name_='KeyInfo')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.SignedInfo = obj_
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.SignatureValue = obj_
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.KeyInfo = obj_
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None):
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignatureValueType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='SignatureValueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None):
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self): return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod): self.SignatureMethod = SignatureMethod
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignedInfoType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespace_, name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(outfile, level, namespace_, name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SignedInfoType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CanonicalizationMethod is not None:
            showIndent(outfile, level)
            outfile.write('CanonicalizationMethod=model_.CanonicalizationMethodType(\n')
            self.CanonicalizationMethod.exportLiteral(outfile, level, name_='CanonicalizationMethod')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureMethod is not None:
            showIndent(outfile, level)
            outfile.write('SignatureMethod=model_.SignatureMethodType(\n')
            self.SignatureMethod.exportLiteral(outfile, level, name_='SignatureMethod')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Reference=[\n')
        level += 1
        for Reference_ in self.Reference:
            showIndent(outfile, level)
            outfile.write('model_.ReferenceType(\n')
            Reference_.exportLiteral(outfile, level, name_='ReferenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.CanonicalizationMethod = obj_
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.SignatureMethod = obj_
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
# end class SignedInfoType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, URI=None, Transforms=None, DigestMethod=None, DigestValue=None):
        self.Type = _cast(None, Type)
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
    def factory(*args_, **kwargs_):
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def validate_DigestValueType(self, value):
        # Validate type DigestValueType, a restriction on xs:base64Binary.
        pass
    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType'):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (self.gds_format_string(quote_attrib(self.URI).encode(ExternalEncoding), input_name='URI'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_, name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespace_, name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDigestValue>%s</%sDigestValue>%s' % (namespace_, self.gds_format_base64(self.DigestValue, input_name='DigestValue'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ReferenceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type="%s",\n' % (self.Type,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            showIndent(outfile, level)
            outfile.write('URI="%s",\n' % (self.URI,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transforms is not None:
            showIndent(outfile, level)
            outfile.write('Transforms=model_.TransformsType(\n')
            self.Transforms.exportLiteral(outfile, level, name_='Transforms')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestMethod is not None:
            showIndent(outfile, level)
            outfile.write('DigestMethod=model_.DigestMethodType(\n')
            self.DigestMethod.exportLiteral(outfile, level, name_='DigestMethod')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestValue is not None:
            showIndent(outfile, level)
            outfile.write('DigestValue=model_.xs_base64Binary(\n')
            self.DigestValue.exportLiteral(outfile, level, name_='DigestValue')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.DigestMethod = obj_
        elif nodeName_ == 'DigestValue':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError), exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DigestValue')
            else:
                bval_ = None
            self.DigestValue = bval_
            self.validate_DigestValueType(self.DigestValue)    # validate type DigestValueType
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transform=None):
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
    def factory(*args_, **kwargs_):
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transform(self): return self.Transform
    def set_Transform(self, Transform): self.Transform = Transform
    def add_Transform(self, value): self.Transform.append(value)
    def insert_Transform(self, index, value): self.Transform[index] = value
    def hasContent_(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TransformsType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransformsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            Transform_.export(outfile, level, namespace_, name_='Transform', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='TransformsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Transform=[\n')
        level += 1
        for Transform_ in self.Transform:
            showIndent(outfile, level)
            outfile.write('model_.TransformType(\n')
            Transform_.exportLiteral(outfile, level, name_='TransformType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, XPath=None):
        self.Algorithm = _cast(None, Algorithm)
        self.XPath = XPath
    def factory(*args_, **kwargs_):
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_XPath(self): return self.XPath
    def set_XPath(self, XPath): self.XPath = XPath
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def hasContent_(self):
        if (
            self.XPath is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TransformType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.XPath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXPath>%s</%sXPath>%s' % (namespace_, self.gds_format_string(quote_xml(self.XPath).encode(ExternalEncoding), input_name='XPath'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='TransformType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.XPath is not None:
            showIndent(outfile, level)
            outfile.write('XPath=%s,\n' % quote_python(self.XPath).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'XPath':
            XPath_ = child_.text
            XPath_ = self.gds_validate_string(XPath_, node, 'XPath')
            self.XPath = XPath_
# end class TransformType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, X509Data=None):
        self.Id = _cast(None, Id)
        self.X509Data = X509Data
    def factory(*args_, **kwargs_):
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.X509Data is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='KeyInfoType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509Data is not None:
            self.X509Data.export(outfile, level, namespace_, name_='X509Data', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='KeyInfoType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.X509Data is not None:
            showIndent(outfile, level)
            outfile.write('X509Data=model_.X509DataType(\n')
            self.X509Data.exportLiteral(outfile, level, name_='X509Data')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509Data':
            obj_ = X509DataType.factory()
            obj_.build(child_)
            self.X509Data = obj_
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RSAKeyValue=None):
        self.RSAKeyValue = RSAKeyValue
    def factory(*args_, **kwargs_):
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RSAKeyValue(self): return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue): self.RSAKeyValue = RSAKeyValue
    def hasContent_(self):
        if (
            self.RSAKeyValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='KeyValueType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RSAKeyValue is not None:
            self.RSAKeyValue.export(outfile, level, namespace_, name_='RSAKeyValue', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='KeyValueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RSAKeyValue is not None:
            showIndent(outfile, level)
            outfile.write('RSAKeyValue=model_.RSAKeyValueType(\n')
            self.RSAKeyValue.exportLiteral(outfile, level, name_='RSAKeyValue')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValueType.factory()
            obj_.build(child_)
            self.RSAKeyValue = obj_
# end class KeyValueType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509Certificate=None):
        self.X509Certificate = X509Certificate
    def factory(*args_, **kwargs_):
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509Certificate(self): return self.X509Certificate
    def set_X509Certificate(self, X509Certificate): self.X509Certificate = X509Certificate
    def hasContent_(self):
        if (
            self.X509Certificate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='X509DataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='X509DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509Certificate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509Certificate>%s</%sX509Certificate>%s' % (namespace_, self.gds_format_base64(self.X509Certificate, input_name='X509Certificate'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='X509DataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.X509Certificate is not None:
            showIndent(outfile, level)
            outfile.write('X509Certificate=model_.xs_base64Binary(\n')
            self.X509Certificate.exportLiteral(outfile, level, name_='X509Certificate')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509Certificate':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError), exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'X509Certificate')
            else:
                bval_ = None
            self.X509Certificate = bval_
# end class X509DataType


class ListaNfseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Nfse=None):
        if Nfse is None:
            self.Nfse = []
        else:
            self.Nfse = Nfse
    def factory(*args_, **kwargs_):
        if ListaNfseType.subclass:
            return ListaNfseType.subclass(*args_, **kwargs_)
        else:
            return ListaNfseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Nfse(self): return self.Nfse
    def set_Nfse(self, Nfse): self.Nfse = Nfse
    def add_Nfse(self, value): self.Nfse.append(value)
    def insert_Nfse(self, index, value): self.Nfse[index] = value
    def hasContent_(self):
        if (
            self.Nfse
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ListaNfseType', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ListaNfseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ListaNfseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ListaNfseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Nfse_ in self.Nfse:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNfse>%s</%sNfse>%s' % (namespace_, self.gds_format_string(quote_xml(Nfse_).encode(ExternalEncoding), input_name='Nfse'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ListaNfseType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Nfse=[\n')
        level += 1
        for Nfse_ in self.Nfse:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Nfse_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Nfse':
            Nfse_ = child_.text
            Nfse_ = self.gds_validate_string(Nfse_, node, 'Nfse')
            self.Nfse.append(Nfse_)
# end class ListaNfseType


class ListaRpsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Rps=None):
        if Rps is None:
            self.Rps = []
        else:
            self.Rps = Rps
    def factory(*args_, **kwargs_):
        if ListaRpsType.subclass:
            return ListaRpsType.subclass(*args_, **kwargs_)
        else:
            return ListaRpsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Rps(self): return self.Rps
    def set_Rps(self, Rps): self.Rps = Rps
    def add_Rps(self, value): self.Rps.append(value)
    def insert_Rps(self, index, value): self.Rps[index] = value
    def hasContent_(self):
        if (
            self.Rps
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ListaRpsType', namespacedef_=' xmlns:tipos="http://www.betha.com.br/e-nota-contribuinte-ws/tipos" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ListaRpsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ListaRpsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ListaRpsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Rps_ in self.Rps:
            Rps_.export(outfile, level, namespace_, name_='Rps', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ListaRpsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Rps=[\n')
        level += 1
        for Rps_ in self.Rps:
            showIndent(outfile, level)
            outfile.write('model_.tcRps(\n')
            Rps_.exportLiteral(outfile, level, name_='tcRps')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Rps':
            obj_ = tcRps.factory()
            obj_.build(child_)
            self.Rps.append(obj_)
# end class ListaRpsType


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None):
        self.Algorithm = _cast(None, Algorithm)
        pass
    def factory(*args_, **kwargs_):
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CanonicalizationMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='CanonicalizationMethodType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None):
        self.Algorithm = _cast(None, Algorithm)
        pass
    def factory(*args_, **kwargs_):
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignatureMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='SignatureMethodType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureMethodType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None):
        self.Algorithm = _cast(None, Algorithm)
        pass
    def factory(*args_, **kwargs_):
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DigestMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='DigestMethodType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DigestMethodType


class RSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None):
        self.Modulus = Modulus
        self.Exponent = Exponent
    def factory(*args_, **kwargs_):
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modulus(self): return self.Modulus
    def set_Modulus(self, Modulus): self.Modulus = Modulus
    def get_Exponent(self): return self.Exponent
    def set_Exponent(self, Exponent): self.Exponent = Exponent
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on xs:base64Binary.
        pass
    def hasContent_(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RSAKeyValueType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModulus>%s</%sModulus>%s' % (namespace_, self.gds_format_base64(self.Modulus, input_name='Modulus'), namespace_, eol_))
        if self.Exponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExponent>%s</%sExponent>%s' % (namespace_, self.gds_format_base64(self.Exponent, input_name='Exponent'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='RSAKeyValueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Modulus is not None:
            showIndent(outfile, level)
            outfile.write('Modulus=model_.xs_base64Binary(\n')
            self.Modulus.exportLiteral(outfile, level, name_='Modulus')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Exponent is not None:
            showIndent(outfile, level)
            outfile.write('Exponent=model_.xs_base64Binary(\n')
            self.Exponent.exportLiteral(outfile, level, name_='Exponent')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modulus':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError), exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Modulus')
            else:
                bval_ = None
            self.Modulus = bval_
            self.validate_CryptoBinary(self.Modulus)    # validate type CryptoBinary
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError), exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Exponent')
            else:
                bval_ = None
            self.Exponent = bval_
            self.validate_CryptoBinary(self.Exponent)    # validate type CryptoBinary
# end class RSAKeyValueType


GDSClassesMapping = {
    'Tomador': tcDadosTomador,
    'Servico': TcDadosServico,
    'Transform': TransformType,
    'SignatureMethod': SignatureMethodType,
    'InfPedidoCancelamento': tcInfPedidoCancelamento,
    'InfRps': tcInfRps,
    'Prestador': tcIdentificacaoPrestador,
    'X509Data': X509DataType,
    'DigestMethod': DigestMethodType,
    'Contato': TcContato,
    'CanonicalizationMethod': CanonicalizationMethodType,
    'RpsSubstituido': tcIdentificacaoRps,
    'IdentificacaoTomador': tcIdentificacaoTomador,
    'IdentificacaoRps': tcIdentificacaoRps,
    'Valores': TcValores,
    'KeyInfo': KeyInfoType,
    'CpfCnpj': TcCpfCnpj,
    'RSAKeyValue': RSAKeyValueType,
    'ListaNfse': ListaNfseType,
    'Signature': SignatureType,
    'Endereco': TcEndereco,
    'Rps': tcRps,
    'Reference': ReferenceType,
    'ListaRps': ListaRpsType,
    'ConstrucaoCivil': tcDadosConstrucaoCivil,
    'IdentificacaoNfse': tcIdentificacaoNfse,
    'IntermediarioServico': TcIdentificacaoIntermediarioServico,
    'Transforms': TransformsType,
    'SignedInfo': SignedInfoType,
    'SignatureValue': SignatureValueType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ConsultarNfseResposta'
        rootClass = ConsultarNfseResposta
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ConsultarNfseResposta'
        rootClass = ConsultarNfseResposta
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    roots = get_root_tag(rootNode)
    rootClass = roots[1]
    if rootClass is None:
        rootClass = ConsultarNfseResposta
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_="ConsultarNfseResposta",
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ConsultarNfseResposta'
        rootClass = ConsultarNfseResposta
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from servico_consultar_nfse_resposta_v01 import *\n\n')
        sys.stdout.write('import servico_consultar_nfse_resposta_v01 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootTag(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CanonicalizationMethodType",
    "ConsultarNfseResposta",
    "DigestMethodType",
    "KeyInfoType",
    "KeyValueType",
    "ListaNfseType",
    "ListaRpsType",
    "RSAKeyValueType",
    "ReferenceType",
    "SignatureMethodType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "TcContato",
    "TcCpfCnpj",
    "TcDadosServico",
    "TcEndereco",
    "TcIdentificacaoIntermediarioServico",
    "TcValores",
    "TransformType",
    "TransformsType",
    "X509DataType",
    "tcDadosConstrucaoCivil",
    "tcDadosTomador",
    "tcIdentificacaoNfse",
    "tcIdentificacaoPrestador",
    "tcIdentificacaoRps",
    "tcIdentificacaoTomador",
    "tcInfPedidoCancelamento",
    "tcInfRps",
    "tcLoteRps",
    "tcPedidoCancelamento",
    "tcRps"
]
